// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	ipam "github.com/docker/go-plugins-helpers/ipam"
	mock "github.com/stretchr/testify/mock"

	types "github.com/projecteru2/barrel/types"
)

// AddressManager is an autogenerated mock type for the AddressManager type
type AddressManager struct {
	mock.Mock
}

// AquireIfReserved provides a mock function with given fields: address
func (_m *AddressManager) AquireIfReserved(address *types.Address) (bool, error) {
	ret := _m.Called(address)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*types.Address) bool); ok {
		r0 = rf(address)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*types.Address) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCapabilities provides a mock function with given fields:
func (_m *AddressManager) GetCapabilities() (*ipam.CapabilitiesResponse, error) {
	ret := _m.Called()

	var r0 *ipam.CapabilitiesResponse
	if rf, ok := ret.Get(0).(func() *ipam.CapabilitiesResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ipam.CapabilitiesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDefaultAddressSpaces provides a mock function with given fields:
func (_m *AddressManager) GetDefaultAddressSpaces() (*ipam.AddressSpacesResponse, error) {
	ret := _m.Called()

	var r0 *ipam.AddressSpacesResponse
	if rf, ok := ret.Get(0).(func() *ipam.AddressSpacesResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ipam.AddressSpacesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIPPoolsByNetworkName provides a mock function with given fields: name
func (_m *AddressManager) GetIPPoolsByNetworkName(name string) ([]types.Pool, error) {
	ret := _m.Called(name)

	var r0 []types.Pool
	if rf, ok := ret.Get(0).(func(string) []types.Pool); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Pool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitContainerInfoRecord provides a mock function with given fields: containerInfo
func (_m *AddressManager) InitContainerInfoRecord(containerInfo types.ContainerInfo) error {
	ret := _m.Called(containerInfo)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.ContainerInfo) error); ok {
		r0 = rf(containerInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsAddressReserved provides a mock function with given fields: address
func (_m *AddressManager) IsAddressReserved(address *types.Address) (bool, error) {
	ret := _m.Called(address)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*types.Address) bool); ok {
		r0 = rf(address)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*types.Address) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReleaseAddress provides a mock function with given fields: _a0
func (_m *AddressManager) ReleaseAddress(_a0 *ipam.ReleaseAddressRequest) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ipam.ReleaseAddressRequest) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReleaseContainerAddresses provides a mock function with given fields: containerID
func (_m *AddressManager) ReleaseContainerAddresses(containerID string) error {
	ret := _m.Called(containerID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(containerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReleaseContainerAddressesByIPPools provides a mock function with given fields: containerID, pools
func (_m *AddressManager) ReleaseContainerAddressesByIPPools(containerID string, pools []types.Pool) error {
	ret := _m.Called(containerID, pools)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []types.Pool) error); ok {
		r0 = rf(containerID, pools)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReleasePool provides a mock function with given fields: _a0
func (_m *AddressManager) ReleasePool(_a0 *ipam.ReleasePoolRequest) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ipam.ReleasePoolRequest) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReleaseReservedAddress provides a mock function with given fields: address
func (_m *AddressManager) ReleaseReservedAddress(address types.Address) error {
	ret := _m.Called(address)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Address) error); ok {
		r0 = rf(address)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequestAddress provides a mock function with given fields: _a0
func (_m *AddressManager) RequestAddress(_a0 *ipam.RequestAddressRequest) (*ipam.RequestAddressResponse, error) {
	ret := _m.Called(_a0)

	var r0 *ipam.RequestAddressResponse
	if rf, ok := ret.Get(0).(func(*ipam.RequestAddressRequest) *ipam.RequestAddressResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ipam.RequestAddressResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ipam.RequestAddressRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestPool provides a mock function with given fields: _a0
func (_m *AddressManager) RequestPool(_a0 *ipam.RequestPoolRequest) (*ipam.RequestPoolResponse, error) {
	ret := _m.Called(_a0)

	var r0 *ipam.RequestPoolResponse
	if rf, ok := ret.Get(0).(func(*ipam.RequestPoolRequest) *ipam.RequestPoolResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ipam.RequestPoolResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ipam.RequestPoolRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReserveAddress provides a mock function with given fields: address
func (_m *AddressManager) ReserveAddress(address types.Address) error {
	ret := _m.Called(address)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Address) error); ok {
		r0 = rf(address)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReserveAddressForContainer provides a mock function with given fields: containerID, address
func (_m *AddressManager) ReserveAddressForContainer(containerID string, address types.Address) error {
	ret := _m.Called(containerID, address)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, types.Address) error); ok {
		r0 = rf(containerID, address)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReserveAddressFromPools provides a mock function with given fields: pools
func (_m *AddressManager) ReserveAddressFromPools(pools []types.Pool) (types.AddressWithVersion, error) {
	ret := _m.Called(pools)

	var r0 types.AddressWithVersion
	if rf, ok := ret.Get(0).(func([]types.Pool) types.AddressWithVersion); ok {
		r0 = rf(pools)
	} else {
		r0 = ret.Get(0).(types.AddressWithVersion)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]types.Pool) error); ok {
		r1 = rf(pools)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
