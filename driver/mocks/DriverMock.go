// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	network "github.com/docker/go-plugins-helpers/network"
)

// DriverMock is an autogenerated mock type for the DriverMock type
type DriverMock struct {
	mock.Mock
}

// AllocateNetwork provides a mock function with given fields: _a0
func (_m *DriverMock) AllocateNetwork(_a0 *network.AllocateNetworkRequest) (*network.AllocateNetworkResponse, error) {
	ret := _m.Called(_a0)

	var r0 *network.AllocateNetworkResponse
	if rf, ok := ret.Get(0).(func(*network.AllocateNetworkRequest) *network.AllocateNetworkResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*network.AllocateNetworkResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*network.AllocateNetworkRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEndpoint provides a mock function with given fields: _a0
func (_m *DriverMock) CreateEndpoint(_a0 *network.CreateEndpointRequest) (*network.CreateEndpointResponse, error) {
	ret := _m.Called(_a0)

	var r0 *network.CreateEndpointResponse
	if rf, ok := ret.Get(0).(func(*network.CreateEndpointRequest) *network.CreateEndpointResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*network.CreateEndpointResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*network.CreateEndpointRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNetwork provides a mock function with given fields: _a0
func (_m *DriverMock) CreateNetwork(_a0 *network.CreateNetworkRequest) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*network.CreateNetworkRequest) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteEndpoint provides a mock function with given fields: _a0
func (_m *DriverMock) DeleteEndpoint(_a0 *network.DeleteEndpointRequest) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*network.DeleteEndpointRequest) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteNetwork provides a mock function with given fields: _a0
func (_m *DriverMock) DeleteNetwork(_a0 *network.DeleteNetworkRequest) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*network.DeleteNetworkRequest) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DiscoverDelete provides a mock function with given fields: _a0
func (_m *DriverMock) DiscoverDelete(_a0 *network.DiscoveryNotification) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*network.DiscoveryNotification) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DiscoverNew provides a mock function with given fields: _a0
func (_m *DriverMock) DiscoverNew(_a0 *network.DiscoveryNotification) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*network.DiscoveryNotification) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EndpointInfo provides a mock function with given fields: _a0
func (_m *DriverMock) EndpointInfo(_a0 *network.InfoRequest) (*network.InfoResponse, error) {
	ret := _m.Called(_a0)

	var r0 *network.InfoResponse
	if rf, ok := ret.Get(0).(func(*network.InfoRequest) *network.InfoResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*network.InfoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*network.InfoRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FreeNetwork provides a mock function with given fields: _a0
func (_m *DriverMock) FreeNetwork(_a0 *network.FreeNetworkRequest) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*network.FreeNetworkRequest) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCapabilities provides a mock function with given fields:
func (_m *DriverMock) GetCapabilities() (*network.CapabilitiesResponse, error) {
	ret := _m.Called()

	var r0 *network.CapabilitiesResponse
	if rf, ok := ret.Get(0).(func() *network.CapabilitiesResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*network.CapabilitiesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Join provides a mock function with given fields: _a0
func (_m *DriverMock) Join(_a0 *network.JoinRequest) (*network.JoinResponse, error) {
	ret := _m.Called(_a0)

	var r0 *network.JoinResponse
	if rf, ok := ret.Get(0).(func(*network.JoinRequest) *network.JoinResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*network.JoinResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*network.JoinRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Leave provides a mock function with given fields: _a0
func (_m *DriverMock) Leave(_a0 *network.LeaveRequest) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*network.LeaveRequest) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProgramExternalConnectivity provides a mock function with given fields: _a0
func (_m *DriverMock) ProgramExternalConnectivity(_a0 *network.ProgramExternalConnectivityRequest) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*network.ProgramExternalConnectivityRequest) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RevokeExternalConnectivity provides a mock function with given fields: _a0
func (_m *DriverMock) RevokeExternalConnectivity(_a0 *network.RevokeExternalConnectivityRequest) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*network.RevokeExternalConnectivityRequest) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
