// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	context "context"

	store "github.com/projecteru2/barrel/store"
	mock "github.com/stretchr/testify/mock"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// Close provides a mock function with given fields: _a0
func (_m *Store) Close(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, codec
func (_m *Store) Delete(ctx context.Context, codec store.Codec) error {
	ret := _m.Called(ctx, codec)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, store.Codec) error); ok {
		r0 = rf(ctx, codec)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, codec
func (_m *Store) Get(ctx context.Context, codec store.Codec) error {
	ret := _m.Called(ctx, codec)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, store.Codec) error); ok {
		r0 = rf(ctx, codec)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAndDelete provides a mock function with given fields: ctx, codec
func (_m *Store) GetAndDelete(ctx context.Context, codec store.Codec) error {
	ret := _m.Called(ctx, codec)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, store.Codec) error); ok {
		r0 = rf(ctx, codec)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Put provides a mock function with given fields: ctx, codec
func (_m *Store) Put(ctx context.Context, codec store.Codec) error {
	ret := _m.Called(ctx, codec)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, store.Codec) error); ok {
		r0 = rf(ctx, codec)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutMulti provides a mock function with given fields: ctx, codec
func (_m *Store) PutMulti(ctx context.Context, codec ...store.Codec) error {
	_va := make([]interface{}, len(codec))
	for _i := range codec {
		_va[_i] = codec[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...store.Codec) error); ok {
		r0 = rf(ctx, codec...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, codec
func (_m *Store) Update(ctx context.Context, codec store.UpdateCodec) (bool, error) {
	ret := _m.Called(ctx, codec)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, store.UpdateCodec) bool); ok {
		r0 = rf(ctx, codec)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, store.UpdateCodec) error); ok {
		r1 = rf(ctx, codec)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateElseGet provides a mock function with given fields: ctx, codec
func (_m *Store) UpdateElseGet(ctx context.Context, codec store.Codec) (bool, error) {
	ret := _m.Called(ctx, codec)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, store.Codec) bool); ok {
		r0 = rf(ctx, codec)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, store.Codec) error); ok {
		r1 = rf(ctx, codec)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
